// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "github.com/joshtrigger/api/models"
	mock "github.com/stretchr/testify/mock"
)

// BookService is an autogenerated mock type for the BookService type
type BookService struct {
	mock.Mock
}

// CreateBook provides a mock function with given fields: input
func (_m *BookService) CreateBook(input models.Book) *models.Book {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateBook")
	}

	var r0 *models.Book
	if rf, ok := ret.Get(0).(func(models.Book) *models.Book); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	return r0
}

// DeleteBook provides a mock function with given fields: id
func (_m *BookService) DeleteBook(id string) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBook")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBook provides a mock function with given fields: id
func (_m *BookService) GetBook(id string) (*models.Book, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Book, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Book); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooks provides a mock function with given fields:
func (_m *BookService) GetBooks() *[]models.Book {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 *[]models.Book
	if rf, ok := ret.Get(0).(func() *[]models.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Book)
		}
	}

	return r0
}

// UpdateBook provides a mock function with given fields: id, input
func (_m *BookService) UpdateBook(id string, input models.Book) (*models.Book, error) {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBook")
	}

	var r0 *models.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Book) (*models.Book, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(string, models.Book) *models.Book); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.Book) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookService creates a new instance of BookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookService {
	mock := &BookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
